load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@npm//:prettier/package_json.bzl", prettier = "bin")
load("@pypi//:requirements.bzl", "entry_point")

bzl_library(
    name = "repositories",
    srcs = ["repositories.bzl"],
    visibility = ["//visibility:public"],
    deps = [
        "@bazel_tools//tools/build_defs/repo:http.bzl",
        "@bazel_tools//tools/build_defs/repo:utils.bzl",
    ],
)

prettier.prettier_binary(
    name = "prettier",
    # Allow the binary to be run outside bazel
    env = {"BAZEL_BINDIR": "."},
)

java_binary(
    name = "java-format",
    jvm_flags = [
        "--add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
    ],
    main_class = "com.google.googlejavaformat.java.Main",
    runtime_deps = ["@google-java-format//jar"],
)

sh_binary(
    name = "fmt",
    srcs = ["fmt.sh"],
    data = [
        # FIXME: somehow depend only on the ones needed for languages we'll format
        # otherwise it's a big fat eager fetch
        "@swiftformat",
        "@buildifier_prebuilt//:buildifier",
        ":prettier",
        entry_point("black"),
        ":java-format",
    ],
    deps = ["@bazel_tools//tools/bash/runfiles"],
)
